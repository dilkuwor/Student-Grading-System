using GPA.Models;
using Microsoft.Reporting.WebForms;
using System.Collections.Generic;
using System.IO;
using System.Web.Mvc;
using GPA.Models.Manager;
using System;
using System.Linq;
using System.Web;
using GPA.DAL.Manager;
using GPA.DAL.Extended;
using GPA.DAL.Util;
using System.Net;



namespace GPA.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            
            //CreateSession(19);
            GPA.Models.UserDetail currentUser = (GPA.Models.UserDetail)Session["CurrentUser"];
           
            Session["currentnav"] = null;
            return View(PrepareDashboardDataViewModel(currentUser.RegistrationID));
        }


        /// <summary>
        /// For Testing purpose only
        /// </summary>
        /// <returns></returns>
        public DashbordViewModel PrepareDashboardDataViewModel(int userid)
        {
            DashbordViewModel model = new DashbordViewModel();
            AccountManager amanager = new AccountManager();
           
            //if the user is registered check his role and display different layout
            StudentViewModel studentModel = new StudentViewModel();
            AdminViewModel adminModel = new AdminViewModel();
            CourseManager cmanager = new CourseManager();
            adminModel.RequestedCourses = cmanager.GetRequestedCourses();
            StudentManager smanager = new StudentManager();
            studentModel.Courses = smanager.GetAlreadyTakenCoursesByUserID(userid);
            studentModel.ECourses = smanager.GetECourses(userid);
            model.StudentViewModel = studentModel;
            model.AdminViewModel = adminModel;
            GradeEnterFormViewModel grademodel = new GradeEnterFormViewModel();
            grademodel.CourseList = cmanager.GetCourseForDropdown();
            //grademodel.Grades = cmanager.GetGradeList();
            grademodel.Students = smanager.GetStudentsByCourseID(-1);
            grademodel.Grades = cmanager.GetGradesForDropdown();
            ApplicationSettingViewModel applicationSettingViewModel = new ApplicationSettingViewModel();
            adminModel.ApplicationSettingViewModel = applicationSettingViewModel;
            model.GradeEnterFormViewModel = grademodel;
            model.FeedbackViewModel = PrepareFeedbackViewModel();
            return model;

        }

        #region Feedback View Model


        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult SendFeedback(FeedbackViewModel model)
        {
            DynamicNavigation dyn = new DynamicNavigation();

            Feedback feedback = new Feedback();
            feedback.Date = DateTime.Now.ToString("yyyy-MM-dd");
            feedback.Comment = model.FeedbackSendViewModel.Message;
            feedback.Subject = model.FeedbackSendViewModel.Subject;
            UserDetail current = (UserDetail)Session["CurrentUser"];
            FeedbackManager fmanager = new FeedbackManager();

            feedback.FromID = current.RegistrationID;
            feedback.ToID = model.FeedbackSendViewModel.ToID;
            fmanager.SendFeedback(feedback);
            TempData["MessageSent"] = "True";

            // 01.07.14 Add D.Shrestha Begin
            if (!Request.IsAjaxRequest())
            {
                return RedirectToAction("Index");
            }

            // get configuration for email            
            ApplicationSettingViewModel appSettingViewModel = new ApplicationSettingViewModel();

            // get details of email
            UserDetail senderDetail = fmanager.FindUserByRegID(feedback.FromID);
            UserDetail receiverDetail = fmanager.FindUserByRegID(feedback.ToID);

            // result for send email
            bool result = false;

            try
            {
                SendEmail sendEmail = new SendEmail(appSettingViewModel.SMTPServerName,
                Int32.Parse(appSettingViewModel.SMTPServerPort), appSettingViewModel.SMTPUser, appSettingViewModel.SMTPPass);
                result = sendEmail.Send(senderDetail.Email, receiverDetail.Email, feedback.Subject, "<<Autogenerated FeedBack From " + senderDetail.FName + " " + senderDetail.LName + ". Please do not reply to this email >>\r\n\r\n" + feedback.Comment);
            }
            catch (Exception ex)
            {
                // TODO: write in log
                Console.Error.WriteLine("Fail in Sending Email " + ex.Message);
            }

            // set result of sending email.
            ViewBag.result = result;
            SetCurrentTab("feedback");
            return PartialView("_FeedbackResult");
            // 01.07.14 Add D.Shrestha End

        }


        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult SendFeedbackReply(FeedbackViewModel model)
        {
            FormCollection col = new FormCollection();
            var value = col[0];
            return RedirectToAction("Index");

        }

        public ActionResult DeleteFeedback(int id)
        {
            TempData["MessageDeleted"] = "True";
            TempData["MessageSent"] = "False";
            FeedbackManager fmanager = new FeedbackManager();
            fmanager.DeleteFeedback(id);
            if (!Request.IsAjaxRequest())
            {
                return RedirectToAction("Index");
            }
            var httpStatus = HttpStatusCode.OK;
            SetCurrentTab("feedback");
            return new HttpStatusCodeResult(httpStatus);
            //return RedirectToAction("Index");
        }

        public ActionResult FeedbackDetails(int id)
        {
            TempData["MessageDeleted"] = "False";
            TempData["Detail"] = "True";
            FeedbackManager fmanager = new FeedbackManager();
            UserDetail currentUser = (UserDetail)Session["CurrentUser"];
            UserFeedback ufeedback = fmanager.GetFeedbacks(currentUser).Where(r => r.FeedbackID == id).Single();
            TempData["DetailFeedback"] = ufeedback;
            SetCurrentTab("feedback");
            TempData["current"] = "feedback";
            return RedirectToAction("Index");
        }




        public ActionResult FeedbackReply(int id)
        {
            FeedbackManager fmanager = new FeedbackManager();
            TempData["Reply"] = "True";
            UserDetail currentUser = (UserDetail)Session["CurrentUser"];
            UserFeedback ufeedback = fmanager.GetFeedbacks(currentUser).Where(r => r.FeedbackID == id).Single();
            TempData["DetailFeedback"] = fmanager.PrepareReplyMessage(ufeedback);
            SetCurrentTab("feedback");
            return RedirectToAction("Index");
        }


        public IEnumerable<SelectListItem> GetUserList(UserDetail currentUser)
        {
            FeedbackManager feedManager = new FeedbackManager();
            return from ruser in feedManager.GetRegisterUser(currentUser)
                   select new SelectListItem
                   {
                       Text = ruser.FName + " " + ruser.LName,
                       Value = ((int)ruser.RegistrationID).ToString()
                   };

        }



        public FeedbackViewModel PrepareFeedbackViewModel()
        {
            FeedbackViewModel model = new FeedbackViewModel();
            FeedbackManager feedManager = new FeedbackManager();
            model.FeedbackReadViewModel = new FeedbackReadViewModel();
            model.FeedbackReadViewModel.Feedbacks = feedManager.GetFeedbacks((UserDetail)Session["CurrentUser"]);
            FeedbackSendViewModel sendmodel = new FeedbackSendViewModel();
            UserDetail currentUser = (UserDetail)Session["CurrentUser"];
            sendmodel.UserList = GetUserList(currentUser);
            TempData["current"] = "feedback";
            //hides and show the detail message panel
            if (TempData["Detail"] == "True")
            {
                model.FeedBackMood = "Detail";
                model.FeedbackReadViewModel.FeedbackDetail = (UserFeedback)TempData["DetailFeedback"];

            }
            else if (TempData["Reply"] == "True")
            {
                UserFeedback feed = (UserFeedback)TempData["DetailFeedback"];
                FeedbackSendViewModel sendDafault = new FeedbackSendViewModel();
                sendmodel.Message = feed.Comment;
                sendmodel.Subject = feed.Subject;
                sendmodel.ToID = feed.FromID;
                model.FeedBackMood = "Reply";
                SetCurrentTab("feedback");
            }
            model.FeedbackSendViewModel = sendmodel;
            return model;
        }

        #endregion
     
        

        public ActionResult CourseSignup(int courseid)
        {
            return RedirectToAction("Index", "Home");
        }


        public void SetCurrentTab(string current)
        {
            TempData["current"] = current;
            ViewBag.Current = current;
            if (Session["currentnav"] == null)
            {
                DynamicNavigation dyn = new DynamicNavigation();
                dyn.Current = current;
                Session["currentnav"] = dyn;
            }

            ((DynamicNavigation)Session["currentnav"]).Current = current;

           
        }
        

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        public object List { get; set; }
    }
}